[{"title":"Hexo搭建Github个人博客","url":"/2017/04/19/Hexo%E6%90%AD%E5%BB%BAGithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"<h2 id=\"建立自己的github-io\"><a href=\"#建立自己的github-io\" class=\"headerlink\" title=\"建立自己的github.io\"></a>建立自己的github.io</h2><p>建立自己的github.io，这个跟创建普通的github仓库一样，只是仓库的名字叫xxx.github.io。</p>\n<h2 id=\"配置git账号\"><a href=\"#配置git账号\" class=\"headerlink\" title=\"配置git账号\"></a>配置git账号</h2><p>如果本地已安装<a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">SourceTree</a>并已使用github账号下载过项目，则请忽略。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your name&quot;</span><br><span class=\"line\">$ git config --global user.email xxx@email.com&#96;&#96;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置github账号的SSH-key\"><a href=\"#配置github账号的SSH-key\" class=\"headerlink\" title=\"配置github账号的SSH key\"></a>配置github账号的SSH key</h2><p>如果本地已安装<a href=\"https://www.sourcetreeapp.com/\" target=\"_blank\" rel=\"noopener\">SourceTree</a>并已使用github账号下载过项目，则请忽略。</p>\n<h4 id=\"生成ssh公钥\"><a href=\"#生成ssh公钥\" class=\"headerlink\" title=\"生成ssh公钥\"></a>生成ssh公钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -c &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>三次回车即可生成ssh key，对于存放目录，可以使用默认，也可在默认的基础上添加自定义目录。个人倾向于自定义目录。</p>\n<h4 id=\"查看public-key，并把它添加到github公钥中\"><a href=\"#查看public-key，并把它添加到github公钥中\" class=\"headerlink\" title=\"查看public key，并把它添加到github公钥中\"></a>查看public key，并把它添加到github公钥中</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>将#号后的内容拷贝到 <code>Github</code> 公钥中并保存即可。</p>\n<p>具体可参考<a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\" target=\"_blank\" rel=\"noopener\">Github</a>官网的配置，或参考<a href=\"http://git.mydoc.io/?t=154712\" target=\"_blank\" rel=\"noopener\">码云</a>关于ssh key的配置</p>\n<h2 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h2><h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure>\n<p>由于hexo的运行，依赖于<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a>，所以在安装hexo前，请先安装<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a>。</p>\n<h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>Hexo的具体安装可参见其<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官网</a>。</p>\n<h2 id=\"hexo简单使用\"><a href=\"#hexo简单使用\" class=\"headerlink\" title=\"hexo简单使用\"></a>hexo简单使用</h2><h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init myblog</span><br></pre></td></tr></table></figure>\n<p>创建新工程，名字就叫 <code>myblog</code> 。</p>\n<p>创建新工程后，里面会有一堆的文件。其中(<code>_config.yml</code>)文件为工程配置文件，这里面包含了整个工程的运行配置，我们待会会对其进行修改。</p>\n<h4 id=\"修改配置-amp-amp-git绑定\"><a href=\"#修改配置-amp-amp-git绑定\" class=\"headerlink\" title=\"修改配置 &amp;&amp; git绑定\"></a>修改配置 &amp;&amp; git绑定</h4><p>对(<code>_config.yml</code>)文件进行修改， 主要更改点为 <code>title</code> 、 <code>author</code> 、 <code>url</code>、<code>deploy</code> 等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: myblog</span><br><span class=\"line\">author: Tom</span><br><span class=\"line\">url: https:&#x2F;&#x2F;xianzhiding.github.io</span><br><span class=\"line\">...</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:xianzhiding&#x2F;xianzhiding.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建博文\"><a href=\"#创建博文\" class=\"headerlink\" title=\"创建博文\"></a>创建博文</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new myblog</span><br></pre></td></tr></table></figure>\n<p>新建一个名叫myblog的博文。</p>\n<h4 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>该命令可简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n<p>此命令执行后，会在工程里生成一个<code>public</code>文件夹，这个文件夹里的文件，包含了整个静态网站运行的所有文件。这些文件，会在我们部署网站的时候，提交到我们创建的<code>github.io</code>仓库里。</p>\n<h4 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>可简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<p>启动本地服务环境后，可在浏览器中输入<code>http://localhost:4000/</code>预览工程的运行。</p>\n<h4 id=\"部署网站\"><a href=\"#部署网站\" class=\"headerlink\" title=\"部署网站\"></a>部署网站</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>可简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>若前面已配置过<code>_config.yml</code>中的Deployment，则执行部署后，会将<code>public</code>里的内容提交到我们的<code>github.io</code>中。大约5~10分钟，就可以通过<code>github.io</code>访问到自己的静态网站了。</p>\n<h4 id=\"清理缓存\"><a href=\"#清理缓存\" class=\"headerlink\" title=\"清理缓存\"></a>清理缓存</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>在某些情况下（尤其是更改主题后），肯能出现站点运行异常，可执行此命令。</p>\n<p>需要注意的是：若清空了缓存，则站点需要重新生成静态文件并发布。</p>\n","tags":["Hexo"]},{"title":"CSS变量创建网页响应布局","url":"/2019/01/14/CSS%E5%8F%98%E9%87%8F%E5%88%9B%E5%BB%BA%E7%BD%91%E9%A1%B5%E5%93%8D%E5%BA%94%E5%B8%83%E5%B1%80/","content":"<p>在创新的2018年已经过去，在2019年看看如何简单做成响应性的网站</p>\n<p>如果你未曾听说过CSS变量，那么我告诉你，它就是CSS的一种新功能，可以让你拥有在样式表中使用变量的能力，这样做时并不需要什么特别的设置呦。</p>\n<p>从本质上讲，CSS变量可以让你摆脱老式的样式设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">h1 &#123;</span><br><span class=\"line\">    font-size: 30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">navbar&gt;a &#123;</span><br><span class=\"line\">    font-size: 30px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>…而是主张这样写：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">    --base-font-size: 30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">h1 &#123;</span><br><span class=\"line\">    font-size: var(--base-font-size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">navbar&gt;a &#123;</span><br><span class=\"line\">    font-size: var(--base-font-size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的语法看起来的确有点怪怪的，但有没有觉得它和less、sass中的变量有点类似呢，但如此一来，只要更改–base-font-size 变量，就能在整个应用中改变字号了。</p>\n<p>如果你想把CSS变量学明白，可以在Scrimba网站 这里有免费互动CSS变量课程，该课程包含8个互动截屏。</p>\n<h2 id=\"今天来讲一下如何用CSS变量创建响应布局\"><a href=\"#今天来讲一下如何用CSS变量创建响应布局\" class=\"headerlink\" title=\"今天来讲一下如何用CSS变量创建响应布局\"></a>今天来讲一下如何用CSS变量创建响应布局</h2><p>这是一段html</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul class=<span class=\"string\">&quot;item&quot;</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;item 1&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;item 2&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;item 3&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;item 4&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"老方法：\"><a href=\"#老方法：\" class=\"headerlink\" title=\"老方法：\"></a>老方法：</h3><p>在以前即使不使用CSS变量也可以把这些事情搞定。只是需要把要改变的属性在重新重置一下，需要在媒体查询中拥有自己的选择器，但会招致额外的大量代码，像下面这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">    flex-wrap: wrap;</span><br><span class=\"line\">    justify-content: space-around;</span><br><span class=\"line\">    padding: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">    li &#123;</span><br><span class=\"line\">        background-color: <span class=\"comment\">#ff6f69;</span></span><br><span class=\"line\">        border: 1px solid <span class=\"comment\">#fff;</span></span><br><span class=\"line\">        font-size: 20px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        list-style-type: none;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media (min-width: 768px) &#123;</span><br><span class=\"line\">    .item &#123;</span><br><span class=\"line\">        flex-direction: row;</span><br><span class=\"line\">        li &#123;</span><br><span class=\"line\">            background-color: <span class=\"comment\">#ffcc5c;</span></span><br><span class=\"line\">            font-size: 50px;</span><br><span class=\"line\">            height: 300px;</span><br><span class=\"line\">            width: 50%;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media (min-width: 992px) &#123;</span><br><span class=\"line\">    .item &#123;</span><br><span class=\"line\">        flex-wrap: nowrap;</span><br><span class=\"line\">        li &#123;</span><br><span class=\"line\">            background-color: <span class=\"comment\">#ffeead;</span></span><br><span class=\"line\">            font-size: 100px;</span><br><span class=\"line\">            height: 500px;</span><br><span class=\"line\">            width: calc(100% / 4);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新方法\"><a href=\"#新方法\" class=\"headerlink\" title=\"新方法\"></a>新方法</h3><p>下面让我们来看如何使用CSS变量来解决这个问题。首先，要把我们将重复利用和更改的数值存储在变量的内部：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">--base-color: <span class=\"comment\">#ff6f69;</span></span><br><span class=\"line\">--base-font-size: 20px;</span><br><span class=\"line\">--direction: column;</span><br><span class=\"line\">--width: 100%;</span><br><span class=\"line\">--height: 200px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后，在整个页面中简单地使用这些变量就行了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.item &#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  padding: 10px;</span><br><span class=\"line\">  justify-content: space-around;</span><br><span class=\"line\">  flex-direction: var(--direction);</span><br><span class=\"line\">  flex-wrap: var(--wrap);</span><br><span class=\"line\">  li&#123;</span><br><span class=\"line\">    list-style-type: none;</span><br><span class=\"line\">    border: 1px solid <span class=\"comment\">#fff;</span></span><br><span class=\"line\">    height: var(--height);</span><br><span class=\"line\">    width: var(--width);</span><br><span class=\"line\">    background-color: var(--base-color);</span><br><span class=\"line\">    font-size: var(--base-font-size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一旦进行了这样的设置之后，我们只要在媒体查询中简单地更改变量值就行了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">@media (min-width: 768px) &#123;</span><br><span class=\"line\">  :root &#123;</span><br><span class=\"line\">    --base-font-size: 60px;</span><br><span class=\"line\">    --base-color: <span class=\"comment\">#ffcc5c;</span></span><br><span class=\"line\">    --direction: row;</span><br><span class=\"line\">    --height: 300px;</span><br><span class=\"line\">    --width: 50%;</span><br><span class=\"line\">    --wrap:wrap;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media (min-width: 992px) &#123;</span><br><span class=\"line\">  :root &#123;</span><br><span class=\"line\">    --base-font-size: 100px;</span><br><span class=\"line\">    --base-color: <span class=\"comment\">#ffeead;</span></span><br><span class=\"line\">    --direction: row;</span><br><span class=\"line\">    --height: 500px;</span><br><span class=\"line\">    --width: calc(100% / 4);</span><br><span class=\"line\">    --wrap:nowrap;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这比我们以往的方法简便多了。只需盯住 :root，而不必为所有的选择器指定值了。</p>\n<p>这只是一个简单的例子。设想成熟的网站会是什么样子吧，例如，用 –base-margin 来控制APP四周的多数自由空间。想翻转其值也是很容易的事情，不必用复杂的选择器来填充媒体查询了。</p>\n<p>总之，CSS变量绝对是提高响应速度时，所代表的未来。</p>\n","tags":["css var()"]},{"title":"分享一个生成二维码的插件–QRCode.js","url":"/2021/04/02/QR-code-plug-in/","content":"<p>随着移动设备的普及，日常生活中随处可见二维码，大有一码走天下之势。那么前端如何来生成二维码？</p>\n<p>通过QRCode.js我们可以快速生成二维码啦，一起来看看怎么使用吧。</p>\n<h3 id=\"1、引入插件\"><a href=\"#1、引入插件\" class=\"headerlink\" title=\"1、引入插件\"></a>1、引入插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/*html*/</span><br><span class=\"line\">&lt;div id=<span class=\"string\">&quot;qrcode&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">/*js*/</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;qrcode.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、基本用法\"><a href=\"#2、基本用法\" class=\"headerlink\" title=\"2、基本用法\"></a>2、基本用法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">var qrcode = document.getElementById(<span class=\"string\">&#x27;qrcode&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">/*直接生成二维码*/</span><br><span class=\"line\">new QRCode(qrcode, <span class=\"string\">&#x27;http://www.w3cbest.com&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">/*也可以配置二维码的宽高等*/</span><br><span class=\"line\">var qrcodeObj = new QRCode(<span class=\"string\">&#x27;qrcode&#x27;</span>, &#123;</span><br><span class=\"line\">    text: <span class=\"string\">&#x27;http://www.w3cbest.com&#x27;</span>,</span><br><span class=\"line\">    width: 256,</span><br><span class=\"line\">    height: 256,</span><br><span class=\"line\">    colorDark : <span class=\"string\">&#x27;#000000&#x27;</span>, //前景色</span><br><span class=\"line\">    colorLight : <span class=\"string\">&#x27;#ffffff&#x27;</span>  //背景色</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、API\"><a href=\"#3、API\" class=\"headerlink\" title=\"3、API\"></a>3、API</h3><p>设置二维码内容–makeCode</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">qrcodeObj.makeCode(<span class=\"string\">&#x27;http://www.w3cbest.com/?p=6518&amp;preview=true&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>清除二维码–clear</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">qrcodeObj.clear()</span><br></pre></td></tr></table></figure>","tags":["二维码"]},{"title":"适配深色模式方案","url":"/2021/04/19/color-scheme/","content":"<h2 id=\"1-声明-color-scheme\"><a href=\"#1-声明-color-scheme\" class=\"headerlink\" title=\"1.声明 color-scheme\"></a>1.声明 color-scheme</h2><p>有两种方式。</p>\n<h3 id=\"1-1-meta\"><a href=\"#1-1-meta\" class=\"headerlink\" title=\"1.1 meta\"></a>1.1 meta</h3><p>在head中声明 meta，声明当前页面支持 light 和 dark 两种模式，系统切换到深色模式时，浏览器默认样式也会切换到深色；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;meta name=<span class=\"string\">&quot;color-scheme&quot;</span> content=<span class=\"string\">&quot;light dark&quot;</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-CSS\"><a href=\"#1-2-CSS\" class=\"headerlink\" title=\"1.2 CSS\"></a>1.2 CSS</h3><p>下面的 css 同样可以实现上面 meta 声明的效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">    color-scheme: light dark;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：此声明并非为页面做自动适配，只影响浏览器默认样式</p>\n<p>更多信息可查阅：<br>    W3C文档：<a href=\"https://drafts.csswg.org/css-color-adjust-1/\"> CSS Color Adjustment Module Level 1</a><br>    微信开放文档：<a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/DarkMode.html\">DarkMode 适配指南</a></p>\n<h2 id=\"2-通过-CSS-媒体查询\"><a href=\"#2-通过-CSS-媒体查询\" class=\"headerlink\" title=\"2.通过 CSS 媒体查询\"></a>2.通过 CSS 媒体查询</h2><p>prefers-color-scheme CSS 媒体特性用于检测用户是否有将系统的主题色设置为亮色或者暗色。</p>\n<p>no-preference<br>表示系统未得知用户在这方面的选项。在布尔值上下文中，其执行结果为 false。</p>\n<p>light<br>表示用户已告知系统他们选择使用浅色主题的界面。</p>\n<p>dark<br>表示用户已告知系统他们选择使用暗色主题的界面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">    color-scheme: light dark;</span><br><span class=\"line\">    background: white;</span><br><span class=\"line\">    color: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    :root &#123;</span><br><span class=\"line\">        background: black;</span><br><span class=\"line\">        color: white;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>颜色较多的情况，建议使用CSS变量对颜色值进行管理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">    color-scheme: light dark;</span><br><span class=\"line\">    --nav-bg-color: <span class=\"comment\">#F7F7F7;</span></span><br><span class=\"line\">    --content-bg-color: <span class=\"comment\">#FFFFFF;</span></span><br><span class=\"line\">    --font-color: rgba(0,0,0,.9);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media (prefers-color-scheme: dark) &#123;</span><br><span class=\"line\">    :root &#123;</span><br><span class=\"line\">        --nav-bg-color: <span class=\"comment\">#2F2F2F;</span></span><br><span class=\"line\">        --content-bg-color: <span class=\"comment\">#2C2C2C;</span></span><br><span class=\"line\">        --font-color: rgba(255, 255, 255, .8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">    color: var(--font-color)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.header &#123;</span><br><span class=\"line\">    background-color: var(--nav-bg-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.content &#123;</span><br><span class=\"line\">    background-color: var(--content-bg-color);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-图片适配\"><a href=\"#3-图片适配\" class=\"headerlink\" title=\"3.图片适配\"></a>3.图片适配</h2><p>利用picture+source标签，设置不同模式下的图片 url。</p>\n<p>HTML <picture>元素通过包含零或多个 <source> 元素和一个 <img> 元素来为不同的显示/设备场景提供图像版本。浏览器会选择最匹配的子 <source> 元素，如果没有匹配的，就选择 <img> 元素的 src 属性中的URL。然后，所选图像呈现在<img>元素占据的空间中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;picture&gt;</span><br><span class=\"line\">    &lt;!-- 深色模式下的图片 --&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">source</span> srcset=<span class=\"string\">&quot;dark.jpg&quot;</span> media=<span class=\"string\">&quot;(prefers-color-scheme: dark)&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;!-- 默认模式下的图片 --&gt;</span><br><span class=\"line\">    &lt;img src=<span class=\"string\">&quot;light.jpg&quot;</span>/&gt;</span><br><span class=\"line\">&lt;/picture&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-JavaScript中判断当前模式-amp-监听模式变化\"><a href=\"#4-JavaScript中判断当前模式-amp-监听模式变化\" class=\"headerlink\" title=\"4. JavaScript中判断当前模式&amp;监听模式变化\"></a>4. JavaScript中判断当前模式&amp;监听模式变化</h2><h3 id=\"4-1-matchMedia\"><a href=\"#4-1-matchMedia\" class=\"headerlink\" title=\"4.1 matchMedia\"></a>4.1 matchMedia</h3><p>Window 的matchMedia() 方法返回一个新的MediaQueryList 对象，表示指定的媒体查询 (en-US)字符串解析后的结果。返回的MediaQueryList 可被用于判定Document是否匹配媒体查询，或者监控一个document 来判定它匹配了或者停止匹配了此媒体查询。</p>\n<h3 id=\"4-2-addListener\"><a href=\"#4-2-addListener\" class=\"headerlink\" title=\"4.2 addListener()\"></a>4.2 addListener()</h3><p>MediaQueryList接口的addListener()方法向MediaQueryListener添加一个侦听器，该侦听器将运行自定义回调函数以响应媒体查询状态的更改。</p>\n<p>具体用法参考以下例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const mediaQuery = window.matchMedia(<span class=\"string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">darkModeHandler</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mediaQuery.matches) &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;现在是深色模式&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;现在是浅色模式&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 判断当前模式</span><br><span class=\"line\">darkModeHandler()</span><br><span class=\"line\">// 监听模式变化</span><br><span class=\"line\">mediaQuery.addListener(darkModeHandler)</span><br></pre></td></tr></table></figure>","tags":["适配深色"]},{"title":"http和https的区别, get和post的区别, cookie、sessionStorage、localStorage的区别","url":"/2018/07/20/get%E8%AF%B7%E6%B1%82%E4%BC%A0%E5%8F%82%E9%95%BF%E5%BA%A6%E7%9A%84%E8%AF%AF%E5%8C%BA%E3%80%81get%E5%92%8Cpost%E8%AF%B7%E6%B1%82%E5%9C%A8%E7%BC%93%E5%AD%98%E6%96%B9%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<h2 id=\"1，http和https的区别\"><a href=\"#1，http和https的区别\" class=\"headerlink\" title=\"1，http和https的区别\"></a>1，http和https的区别</h2><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。主要的区别如下：</p>\n<ul>\n<li>Https协议需要ca证书，费用较高。</li>\n<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li>\n<li>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443</li>\n<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li>\n</ul>\n<h2 id=\"2，get请求传参长度的误区、get和post请求在缓存方面的区别\"><a href=\"#2，get请求传参长度的误区、get和post请求在缓存方面的区别\" class=\"headerlink\" title=\"2，get请求传参长度的误区、get和post请求在缓存方面的区别\"></a>2，get请求传参长度的误区、get和post请求在缓存方面的区别</h2><p>误区：我们经常说get请求参数的大小存在限制，而post请求的参数大小是无限制的。</p>\n<p>实际上HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对get请求参数的限制是来源与浏览器或web服务器，浏览器或web服务器限制了url的长度。为了明确这个概念，我们必须再次强调下面几点:</p>\n<ul>\n<li>HTTP 协议 未规定 GET 和POST的长度限制</li>\n<li>GET的最大长度显示是因为 浏览器和 web服务器限制了 URI的长度</li>\n<li>不同的浏览器和WEB服务器，限制的最大长度不一样</li>\n<li>要支持IE，则最大长度为2083byte，若只支持Chrome，则最大长度 8182byte</li>\n</ul>\n<h4 id=\"补充补充一个get和post在缓存方面的区别：\"><a href=\"#补充补充一个get和post在缓存方面的区别：\" class=\"headerlink\" title=\"补充补充一个get和post在缓存方面的区别：\"></a>补充补充一个get和post在缓存方面的区别：</h4><ul>\n<li>get请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。</li>\n<li>post不同，post做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此get请求适合于请求缓存。</li>\n</ul>\n<h2 id=\"3-cookie、sessionStorage、localStorage的区别\"><a href=\"#3-cookie、sessionStorage、localStorage的区别\" class=\"headerlink\" title=\"3,cookie、sessionStorage、localStorage的区别\"></a>3,cookie、sessionStorage、localStorage的区别</h2><p>共同点：都是保存在浏览器端，并且是同源的</p>\n<ul>\n<li>Cookie：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下,存储的大小很小只有4K左右。（key：可以在浏览器和服务器端来回传递，存储容量小，只有大约4K左右）</li>\n<li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持，localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话）</li>\n<li>localStorage：localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效）</li>\n</ul>\n<h4 id=\"补充说明一下cookie的作用：\"><a href=\"#补充说明一下cookie的作用：\" class=\"headerlink\" title=\"补充说明一下cookie的作用：\"></a>补充说明一下cookie的作用：</h4><p>保存用户登录状态。例如将用户id存储于一个cookie内，这样当用户下次访问该页面时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个 月、一年等。</p>\n<p>跟踪用户行为。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了 cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后 台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便</p>\n<p>定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。</p>\n","tags":["http https get post"]},{"title":"Js 中的 window.parent ,window.top,window.self 详解","url":"/2017/07/13/window.parent%20,window.top,window.self%20%E8%AF%A6%E8%A7%A3/","content":"<p>在应用有 frameset 或者 iframe 的页面时，parent 是父窗口，top 是最顶级父窗口（有的窗口中套了好几层 frameset 或者 iframe），self 是当前窗口， opener 是用 open 方法打开当前窗口的那个窗口。</p>\n<h3 id=\"window-self\"><a href=\"#window-self\" class=\"headerlink\" title=\"window.self\"></a>window.self</h3><p>功能：是对当前窗口自身的引用。它和 window 属性是等价的。</p>\n<p>语法：window.self</p>\n<p>注：window、self、window.self 是等价的。</p>\n<h3 id=\"window-top\"><a href=\"#window-top\" class=\"headerlink\" title=\"window.top\"></a>window.top</h3><p>功能：返回顶层窗口，即浏览器窗口。</p>\n<p>语法：window.top</p>\n<p>注：如果窗口本身就是顶层窗口，top 属性返回的是对自身的引用。</p>\n<h3 id=\"window-parent\"><a href=\"#window-parent\" class=\"headerlink\" title=\"window.parent\"></a>window.parent</h3><p>功能：返回父窗口。</p>\n<p>语法：window.parent</p>\n<p>注：如果窗口本身是顶层窗口，parent 属性返回的是对自身的引用。</p>\n<p>在框架网页中，一般父窗口就是顶层窗口，但如果框架中还有框架，父窗口和顶层窗口就不一定相同了。</p>\n<p>判断当前窗口是否在一个框架中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">var b &#x3D; window.top!&#x3D;window.self;</span><br><span class=\"line\">document.write( &quot;当前窗口是否在一个框架中：&quot;+b );</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>你应当将框架视为窗口中的不同区域，框架是浏览器窗口中特定的部分。一个浏览器窗口可以根据你的需要分成任意多的框架，一个单个的框架也可以分成其它多个框架，即所谓的嵌套框架。</p>\n<p>举个栗子：</p>\n<p>parent.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">　  &lt;iframe src&#x3D;&quot;child.html&quot; frameborder&#x3D;&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">          window.methods &#x3D; &#123;</span><br><span class=\"line\">              workOrderCallback() &#123;</span><br><span class=\"line\">                  console.log(arguments);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">     &lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>child.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    window.parent.methods.workOrderCallback(111);</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h3><pre><code>首先要保证同域\n这里用的 window.parent 找的是父级 window,区别于 window.top\n</code></pre>\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/parent\" target=\"_blank\" rel=\"noopener\">window.parent</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/top\" target=\"_blank\" rel=\"noopener\">window.top</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/self\" target=\"_blank\" rel=\"noopener\">window.self</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/frameElement\" target=\"_blank\" rel=\"noopener\">window.frameElement</a></p>\n","tags":["window"]},{"title":"什么是防抖和节流？有什么区别？如何实现？","url":"/2019/08/14/%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%EF%BC%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%EF%BC%9F/","content":"<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p>\n<p>思路：</p>\n<p>每次触发事件时都取消之前的延时调用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function debounce(fn) &#123;</span><br><span class=\"line\">    let timeout &#x3D; null; &#x2F;&#x2F; 创建一个标记用来存放定时器的返回值</span><br><span class=\"line\">    return function () &#123;</span><br><span class=\"line\">    clearTimeout(timeout); &#x2F;&#x2F; 每当用户输入的时候把前一个 setTimeout clear 掉</span><br><span class=\"line\">    timeout &#x3D; setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span><br><span class=\"line\">        fn.apply(this, arguments);</span><br><span class=\"line\">    &#125;, 500);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayHi() &#123;</span><br><span class=\"line\">    console.log(&#39;防抖成功&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var inp &#x3D; document.getElementById(&#39;inp&#39;);</span><br><span class=\"line\">inp.addEventListener(&#39;input&#39;, debounce(sayHi)); &#x2F;&#x2F; 防抖</span><br></pre></td></tr></table></figure>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p>\n<p>思路：<br>每次触发事件时都判断当前是否有等待执行的延时函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function throttle(fn) &#123;</span><br><span class=\"line\">    let canRun &#x3D; true; &#x2F;&#x2F; 通过闭包保存一个标记</span><br><span class=\"line\">    return function () &#123;</span><br><span class=\"line\">    if (!canRun) return; &#x2F;&#x2F; 在函数开头判断标记是否为true，不为true则return</span><br><span class=\"line\">    canRun &#x3D; false; &#x2F;&#x2F; 立即设置为false</span><br><span class=\"line\">    setTimeout(() &#x3D;&gt; &#123; &#x2F;&#x2F; 将外部传入的函数的执行放在setTimeout中</span><br><span class=\"line\">        fn.apply(this, arguments);</span><br><span class=\"line\">        &#x2F;&#x2F; 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span><br><span class=\"line\">        canRun &#x3D; true;</span><br><span class=\"line\">    &#125;, 500);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function sayHi(e) &#123;</span><br><span class=\"line\">    console.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">window.addEventListener(&#39;resize&#39;, throttle(sayHi));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","tags":["防抖, 节流"]},{"title":"你真的需要了解一下CSS变量 var()","url":"/2018/11/14/%E4%BD%A0%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8BCSS%E5%8F%98%E9%87%8F/","content":"<p>当Web项目变得越来越大时，他的CSS会变得像天文数字那么大而且还变得混乱。为了帮助我们解决这个问题，新的CSS变量很快就会出现在主流浏览器中，它让开发人员能够重用并轻松编辑重复出现的CSS属性。用过SASS或Less的人应该知道他的变量功能有多棒，但这些变量是预处理器，需要在使用前进行编译。现在变量在vanilla CSS中可用，您可以立即在浏览器中使用它们！</p>\n<h2 id=\"定义和使用CSS变量\"><a href=\"#定义和使用CSS变量\" class=\"headerlink\" title=\"定义和使用CSS变量\"></a>定义和使用CSS变量</h2><p>与任何其他CSS定义一样，变量遵循相同的范围和继承规则。使用它们的最简单方法是通过将声明添加到:root伪类来使它们全局可用，以便所有其他选择器都可以继承它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:root &#123;</span><br><span class=\"line\">  --awesome-blue：＃2196F3; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要访问变量中的值，我们可以使用var(…)语法。请注意，名称区分大小写，因此–foo != –FOO。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.element &#123;</span><br><span class=\"line\">    background-color:var(--awesome-blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器支持\"><a href=\"#浏览器支持\" class=\"headerlink\" title=\"浏览器支持\"></a>浏览器支持</h3><p>常用的浏览器除了IE都完美支持，您可以在此处获取更多详细信息 - 我可以使用CSS变量。下面是几个例子，展示了CSS变量的典型用法。为确保它们正常工作，请尝试在我们上面提到的其中一个浏览器上查看它们。</p>\n<h4 id=\"示例1-主题颜色\"><a href=\"#示例1-主题颜色\" class=\"headerlink\" title=\"示例1 - 主题颜色\"></a>示例1 - 主题颜色</h4><p>当我们需要对多个元素一遍又一遍地应用相同的规则时，CSS中的变量是最有用的，例如主题中的重复颜色。我们不是每次想要重复使用相同颜色时进行复制和粘贴，而是将其放在变量中并从那里访问它。</p>\n<p>现在，如果我们的客户不喜欢我们选择的蓝色阴影，我们可以在一个地方（变量的定义）改变样式来改变整个主题的颜色。没有变量，我们必须手动搜索和替换每一次出现。</p>\n<p>可将代码复制下来在你的编辑器里面测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;margin: 0;padding: 0;box-sizing: border-box;&#125;html &#123;padding: 30px;font: normal 13px&#x2F;1.5 sans-serif;color: #546567;background-color: var(--primary-color);&#125;.container &#123;background: #fff;padding: 20px;&#125;h3 &#123;padding-bottom: 10px;margin-bottom: 15px;&#125;p &#123;background-color: #fff;margin: 15px 0;&#125;button &#123;font-size: 13px;padding: 8px 12px;background-color: #fff;border-radius: 3px;box-shadow: none;text-transform: uppercase;font-weight: bold;cursor: pointer;opacity: 0.8;outline: 0;&#125;button:hover &#123;opacity: 1;&#125;</span><br><span class=\"line\">&lt;!-- 分割线 --&gt;</span><br><span class=\"line\">:root &#123;</span><br><span class=\"line\">    --primary-color: #B1D7DC;</span><br><span class=\"line\">    --accent-color: #FF3F90;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    background-color: var(--primary-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">h3 &#123;</span><br><span class=\"line\">    border-bottom: 2px solid var(--primary-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">button &#123;</span><br><span class=\"line\">    color: var(--accent-color);</span><br><span class=\"line\">    border: 1px solid var(--accent-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class=\"line\">&lt;h3&gt;对话框窗口&lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;p&gt;过放荡不羁的生活，容易得像顺水推舟，但是要结识良朋益友，却难如登天。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;button&gt;确认&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"xmLvoV\" data-default-tab=\"result\" data-user=\"w3cbest\" data-pen-title=\"示例1 – 主题颜色\">See the Pen <a href=\"https://codepen.io/w3cbest/pen/xmLvoV/\">示例1 – 主题颜色</a> by w3cbest.com (<a href=\"https://codepen.io/w3cbest\">@w3cbest</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n<h4 id=\"示例2-属性类名可读性\"><a href=\"#示例2-属性类名可读性\" class=\"headerlink\" title=\"示例2 - 属性类名可读性\"></a>示例2 - 属性类名可读性</h4><p>变量的另一个重要用途是当我们想要保存更复杂的属性值时，我们不必记住它。最好的例子就是有多个参数，如CSS规则box-shadow，transform和font。</p>\n<p>通过将属性放在变量中，我们可以使用语义可读的名称来访问它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">html&#123;background-color: #F9F9F9;&#125;</span><br><span class=\"line\">ul&#123;padding: 20px;list-style: none;width: 300px;&#125;</span><br><span class=\"line\">li&#123;font: normal 18px sans-serif;padding: 20px;transition: 0.4s;margin: 10px;color: #444;background-color: #fff;cursor: pointer;&#125;</span><br><span class=\"line\">&lt;!-- 分割线 --&gt;</span><br><span class=\"line\">:root&#123;</span><br><span class=\"line\">    --tiny-shadow: 0 2px 1px 0 rgba(0, 0, 0, 0.2);</span><br><span class=\"line\">    --animate-right: translateX(20px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">li&#123;</span><br><span class=\"line\">    box-shadow: var(--tiny-shadow);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">li:hover&#123;</span><br><span class=\"line\">    transform: var(--animate-right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;我在这里!&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &lt;li&gt;我在这里!&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &lt;li&gt;我在这里!&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"LMjwKb\" data-default-tab=\"result\" data-user=\"w3cbest\" data-pen-title=\"示例2 – 属性类名可读性\">See the Pen <a href=\"https://codepen.io/w3cbest/pen/LMjwKb/\">示例2 – 属性类名可读性</a> by w3cbest.com (<a href=\"https://codepen.io/w3cbest\">@w3cbest</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n<h4 id=\"示例3-动态更改变量\"><a href=\"#示例3-动态更改变量\" class=\"headerlink\" title=\"示例3 - 动态更改变量\"></a>示例3 - 动态更改变量</h4><p>当多次声明自定义属性时，标准规则有助于解决冲突，样式表中最后定义的会覆盖上面定义的。</p>\n<p>下面的示例演示了用户动态操作改变属性是多么容易，同时仍然保持代码清晰简洁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">*&#123;margin: 0;padding: 0;box-sizing: border-box;&#125;</span><br><span class=\"line\">html&#123;background: #eee;padding: 30px;font: 500 14px sans-serif;color: #333;line-height: 1.5;&#125;</span><br><span class=\"line\">.blue-container&#123;background: #64B5F6;padding-left: 50px;&#125;</span><br><span class=\"line\">.green-container&#123;background: #AED581;padding-left: 50px;&#125;</span><br><span class=\"line\">.container&#123;background: #fff;padding: 20px;&#125;</span><br><span class=\"line\">p&#123;transition: 0.4s;&#125;</span><br><span class=\"line\">.title&#123;font-weight: bold;&#125;</span><br><span class=\"line\">&lt;!-- 分割线 --&gt;</span><br><span class=\"line\">.blue-container&#123;</span><br><span class=\"line\">    --title-text: 18px;</span><br><span class=\"line\">    --main-text: 14px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.blue-container:hover&#123;</span><br><span class=\"line\">    --title-text: 24px;</span><br><span class=\"line\">    --main-text: 16px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.green-container:hover&#123;</span><br><span class=\"line\">    --title-text: 30px;</span><br><span class=\"line\">    --main-text: 18px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.title&#123;</span><br><span class=\"line\">    font-size: var(--title-text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.content&#123;</span><br><span class=\"line\">    font-size: var(--main-text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;blue-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;green-container&quot;&gt;</span><br><span class=\"line\">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class=\"line\">            &lt;p class&#x3D;&quot;title&quot;&gt;这是个标题&lt;&#x2F;p&gt;</span><br><span class=\"line\">            &lt;p class&#x3D;&quot;content&quot;&gt;将鼠标悬停在不同的颜色区域上可以更改此文本和标题的大小。&lt;&#x2F;p&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p class=\"codepen\" data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"OrxLLE\" data-default-tab=\"result\" data-user=\"w3cbest\" data-pen-title=\"示例3 – 动态更改变量\">See the Pen <a href=\"https://codepen.io/w3cbest/pen/OrxLLE/\">示例3 – 动态更改变量</a> by w3cbest.com (<a href=\"https://codepen.io/w3cbest\">@w3cbest</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p><script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script></p>\n\n<p>正如您所看到的，CSS变量非常简单易用，开发人员不必花费太多时间在各处开始应用它们。以下是扩展内容：</p>\n<p>var()函数有两个参数，如果自定义属性失败，它可用于提供回退值：<br>    width: var(–custom-width, 20%);<br>    可以嵌套自定义属性：<br>    –base-color: #f93ce9;<br>    –background-gradient: linear-gradient(to top, var(–base-color), #444);<br>    变量可以与CSS的另一个新增功能- calc() 函数结合使用。<br>    –container-width: 1000px;<br>    max-width: calc(var(–container-width) / 2);</p>\n","tags":["css var()"]},{"title":"使用微信开发工具配置SCSS编译","url":"/2020/04/21/%E4%BD%BF%E7%94%A8%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AESCSS%E7%BC%96%E8%AF%91/","content":"<p>使用微信开发工具手写css真的每次都很浪费时间；现在终于可以用scss在微信开发者工具上自编译出wxss了</p>\n<h3 id=\"主要配置流程如下\"><a href=\"#主要配置流程如下\" class=\"headerlink\" title=\"主要配置流程如下\"></a>主要配置流程如下</h3><p>1，下载EasySass插件复制到微信开发者工具，可以在vscode扩展里面找，然后安装，安装后可以在C盘 <code>用户目录/.vscode/extensions</code> 找到下载的扩展包</p>\n<p>2，打开微信开发工具 找到菜单栏 <code>设置 &gt; 扩展设置 &gt; 拓展 &gt; 编辑器自定义扩展 </code>打开扩展文件夹， 将vscode安装的扩展包复制到这里，然后重启微信开发工具，然后找到菜单栏 <code>设置 &gt; 扩展设置 &gt; 拓展 &gt; 编辑器自定义扩展</code> 就能看到扩展文件，点击开启</p>\n<img src=\"http://file.w3cbest.com/file/images/20210421105100.png\">\n\n<img src=\"http://file.w3cbest.com/file/images/20210421105148.png\">\n\n<p>3，配置编辑器，找到菜单栏 <code>设置 &gt; 扩展设置 &gt; 编辑器 &gt; 更多及工作区设置</code> 进入设置页面，点击扩展 找到 <code>EasySass configuration</code> 看到 <code>formats</code> 在 <code>setting.json</code> 中编辑进入后就会看到生成的配置信息，将.css改为.wxss,如果不想要压缩版可删除</p>\n<img src=\"http://file.w3cbest.com/file/images/20210421105431.png\">\n\n<img src=\"http://file.w3cbest.com/file/images/20210421105501.png\">\n\n<img src=\"http://file.w3cbest.com/file/images/20210421105528.png\">\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;easysass.formats&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;format&quot;: &quot;expanded&quot;,</span><br><span class=\"line\">    &quot;extension&quot;: &quot;.css&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;format&quot;: &quot;compressed&quot;,</span><br><span class=\"line\">    &quot;extension&quot;: &quot;.min.css&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;easysass.formats&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &quot;format&quot;: &quot;expanded&quot;,</span><br><span class=\"line\">    &quot;extension&quot;: &quot;.wxss&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n","tags":["微信开发工具 SCSS编译"]},{"title":"前端缓存技术","url":"/2021/08/25/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/","content":"<p>思路：</p>\n<p>1、当页面第一次加载先判断本地储存中有没有旧数据  //储存数据格式{time:Date.now(), data}<br>2、没有旧数据直接发送请求，并将数据储存本地<br>3、有旧数据并且数据没有过期，就使用本地储存的旧数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">init()&#123;</span><br><span class=\"line\">    &lt;!-- 1,获取本地数据 --&gt;</span><br><span class=\"line\">    const getData &#x3D; sessionStorage.getItem(&#39;key&#39;);</span><br><span class=\"line\">    &lt;!-- 2,判断数据是否存在 --&gt;</span><br><span class=\"line\">    if(!getData)&#123;</span><br><span class=\"line\">        this.getData()</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        &lt;!-- 定义过期时间 (如:10s) --&gt;</span><br><span class=\"line\">        if(Date.new() - getData.time &gt; 1000*10)&#123;</span><br><span class=\"line\">            &lt;!-- 如果时间超过过期时间 重新发送请求 --&gt;</span><br><span class=\"line\">            this.getData()</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            &lt;!-- 如果时间未超过过期时间 使用本地储存数据 --&gt;</span><br><span class=\"line\">            this.render(getData.data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">getData()&#123;</span><br><span class=\"line\">    &lt;!-- 没有旧数据直接发送请求 --&gt;</span><br><span class=\"line\">    request(&#39;url&#39;).then(data&#x3D;&gt;&#123;</span><br><span class=\"line\">        &lt;!-- 并将数据储存本地 --&gt;</span><br><span class=\"line\">        sessionStorage.setItem(&#39;key&#39;,&#123;time: Date.new(), data&#125;);</span><br><span class=\"line\">        this.render(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">render(data)&#123;</span><br><span class=\"line\">    &lt;!-- 这里是数据展示 --&gt;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["缓存"]},{"title":"封装Promise请求","url":"/2021/08/25/%E5%B0%81%E8%A3%85Promise%E8%AF%B7%E6%B1%82request/","content":"<p>思路：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let url &#x3D; &#39;http:&#x2F;&#x2F;localhost:8080&#39;;</span><br><span class=\"line\">let requestTotal &#x3D; 0;</span><br><span class=\"line\">const request &#x3D; (params) &#x3D;&gt;&#123;</span><br><span class=\"line\">  requestTotal++;</span><br><span class=\"line\">  wx.showLoading(&#123;</span><br><span class=\"line\">   title: &#39;加载中...&#39;,</span><br><span class=\"line\">   mask: true</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return new Promise((resolve, reject) &#x3D;&gt;&#123;</span><br><span class=\"line\">    wx.request(&#123;</span><br><span class=\"line\">      url: url + params.url,</span><br><span class=\"line\">      data: params.data || &#123;&#125;,</span><br><span class=\"line\">      method: params.method || &#39;GET&#39;,</span><br><span class=\"line\">      header: &#123;&#39;content-type&#39;: &#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;&#125;,</span><br><span class=\"line\">      success:(result)&#x3D;&gt;&#123;</span><br><span class=\"line\">        resolve(result.data)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail:(error)&#x3D;&gt;&#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      complete:()&#x3D;&gt;&#123;</span><br><span class=\"line\">        requestTotal--;</span><br><span class=\"line\">        if(requestTotal&#x3D;&#x3D;&#x3D;0)&#123;</span><br><span class=\"line\">         wx.hideLoading()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["Promise"]},{"title":"排序算法","url":"/2018/08/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [23, 3, 24, 67, 21, 60];</span><br></pre></td></tr></table></figure>\n<p>1 冒泡排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (let j &#x3D; arr.length - 1; j &gt; 0; j--) &#123;</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; j; i++) &#123;</span><br><span class=\"line\">        if (arr[i] &gt; arr[i + 1]) &#123;</span><br><span class=\"line\">            let temp &#x3D; arr[i];</span><br><span class=\"line\">            arr[i] &#x3D; arr[i + 1];</span><br><span class=\"line\">            arr[i + 1] &#x3D; temp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&#39;第&#39;+j+&#39;次循环&#39;,arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2 选择排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (let j &#x3D; 0; j&lt;arr.length; j++)&#123;</span><br><span class=\"line\">    for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        if(arr[i] &gt; arr[j])&#123;</span><br><span class=\"line\">            let temp &#x3D; arr[i];</span><br><span class=\"line\">            arr[i] &#x3D; arr[j]</span><br><span class=\"line\">            arr[j] &#x3D; temp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(&#39;第&#39;+(j+1)+&#39;次循环&#39;,arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","tags":["排序算法"]}]